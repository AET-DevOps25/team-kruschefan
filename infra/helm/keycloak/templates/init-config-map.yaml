apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-init-script
  namespace: team-kruschefan-project
data:
  init-keycloak.sh: |
    #!/bin/sh
    set -e

    KCADM_PATH="/opt/keycloak/bin/kcadm.sh"
    CLIENT_ROLES=("client_user" "client_admin")

    until $KCADM_PATH config credentials \
      --server http://localhost:8080 \
      --realm master \
      --user "$KEYCLOAK_ADMIN" \
      --password "$KEYCLOAK_ADMIN_PASSWORD"; do
        echo "Keycloak not ready yet, retrying..."
        sleep 5
    done

    echo "Logged into Keycloak CLI"
    $KCADM_PATH update realms/master -s sslRequired=NONE

    # Create realm if it doesn't exist
    if ! $KCADM_PATH get realms | grep '"realm" : "forms-ai"' > /dev/null; then
      $KCADM_PATH create realms -s realm=forms-ai -s enabled=true
      $KCADM_PATH update realms/forms-ai -s sslRequired=NONE
      echo "Realm 'forms-ai' created"
    else
      $KCADM_PATH update realms/forms-ai -s sslRequired=NONE
      echo "Realm 'forms-ai' already exists"
    fi

    # Create 'user-service' confidential client if it doesn't exist
    if ! $KCADM_PATH get clients -r forms-ai | grep "\"clientId\" : \"$KEYCLOAK_FORMSAI_USER\"" > /dev/null; then
      echo "Creating client 'user-service'..."
      $KCADM_PATH create clients -r forms-ai \
        -s clientId=$KEYCLOAK_FORMSAI_USER \
        -s name="User Service" \
        -s enabled=true \
        -s serviceAccountsEnabled=true \
        -s directAccessGrantsEnabled=true \
        -s publicClient=false \
        -s protocol=openid-connect \
        -s secret=$KEYCLOAK_FORMSAI_PASSWORD

      # Create realm role 'spring' if it doesn't exist
      if ! $KCADM_PATH get roles -r forms-ai | grep '"name" : "spring"' > /dev/null; then
        echo "Creating realm role 'spring'..."
        $KCADM_PATH create roles -r forms-ai -s name=spring
      fi

      # Assign roles to service account of user-service
      SERVICE_ACCOUNT_ID=$( $KCADM_PATH get users -r forms-ai -q username=$KEYCLOAK_FORMSAI_USER --fields id --format csv | tail -n1 | tr -d '\r"' )

      # Assign realm role 'spring'
      $KCADM_PATH add-roles -r forms-ai --uusername service-account-$KEYCLOAK_FORMSAI_USER --rolename spring

      # Get the ID of the realm-management client
      REALM_MGMT_ID=$($KCADM_PATH get clients -r forms-ai -q clientId=realm-management --fields id --format csv | tail -n1 | tr -d '\r"')

      # Assign view-users and manage-users to service account
      $KCADM_PATH add-roles -r forms-ai \
        --uusername service-account-$KEYCLOAK_FORMSAI_USER \
        --cclientid realm-management \
        --rolename view-users

      $KCADM_PATH add-roles -r forms-ai \
        --uusername service-account-$KEYCLOAK_FORMSAI_USER \
        --cclientid realm-management \
        --rolename manage-users

      echo "Role assignment to service account succeeded!"

    else
      echo "Client $KEYCLOAK_FORMSAI_USER already exists"
    fi

    # Create Angular frontend client if it doesn't exist
    if ! $KCADM_PATH get clients -r forms-ai | grep '"clientId" : "angular-frontend"' > /dev/null; then
      echo "Creating client 'angular-frontend'..."

      $KCADM_PATH create clients -r forms-ai \
      -s clientId=angular-frontend \
      -s name="Angular Frontend" \
      -s enabled=true \
      -s publicClient=true \
      -s directAccessGrantsEnabled=true \
      -s standardFlowEnabled=true \
      -s protocol=openid-connect \
      -s rootUrl="http://team-kruschefan.local"

      CLIENT_UUID=$($KCADM_PATH get clients -r forms-ai --fields id,clientId | \
        grep -B1 "\"clientId\" : \"angular-frontend\"" | \
        grep '"id"' | sed 's/.*"id" : "\(.*\)".*/\1/')

      for ROLE in "${CLIENT_ROLES[@]}"; do
        $KCADM_PATH create clients/$CLIENT_UUID/roles -r forms-ai -s name=$ROLE
      done

      $KCADM_PATH add-roles \
        -r forms-ai \
        --rname default-roles-forms-ai \
        --cclientid angular-frontend \
        --rolename client_user

        echo "Client 'angular-frontend' created"
      else
        echo "Client 'angular-frontend' already exists"
      fi

    # Create mock user if it doesn't exist
    if ! $KCADM_PATH get users -r forms-ai -q username=$KEYCLOAK_MOCK_USER | grep "\"username\" : \"$KEYCLOAK_MOCK_USER\"" > /dev/null; then
      echo "Creating mock user '$KEYCLOAK_MOCK_USER'..."

      $KCADM_PATH create users -r forms-ai \
        -s username=$KEYCLOAK_MOCK_USER \
        -s email=$KEYCLOAK_MOCK_USER_EMAIL \
        -s enabled=true \
        -s emailVerified=true \
        -s firstName="$KEYCLOAK_MOCK_USER_FIRST_NAME" \
        -s lastName="$KEYCLOAK_MOCK_USER_LAST_NAME"

      # Get the mock user's ID
      MOCK_USER_ID=$($KCADM_PATH get users -r forms-ai -q username=$KEYCLOAK_MOCK_USER --fields id --format csv | tail -n1 | tr -d '\r"')

      # Set password for mock user
      $KCADM_PATH set-password -r forms-ai --userid $MOCK_USER_ID --new-password $KEYCLOAK_MOCK_USER_PASSWORD

      # Optionally assign realm role 'spring'
      $KCADM_PATH add-roles -r forms-ai --uid $MOCK_USER_ID --rolename spring

      echo "Mock user '$KEYCLOAK_MOCK_USER' created and role assigned"
    else
      echo "Mock user '$KEYCLOAK_MOCK_USER' already exists"
    fi

    # Create mock admin if it doesn't exist
    if ! $KCADM_PATH get users -r forms-ai -q username=$KEYCLOAK_MOCK_ADMIN | grep "\"username\" : \"$KEYCLOAK_MOCK_ADMIN\"" > /dev/null; then
      echo "Creating admin user '$KEYCLOAK_MOCK_ADMIN'..."

      $KCADM_PATH create users -r forms-ai \
      -s username=$KEYCLOAK_MOCK_ADMIN \
      -s email=$KEYCLOAK_MOCK_ADMIN_EMAIL \
      -s enabled=true \
      -s emailVerified=true \
      -s firstName="$KEYCLOAK_MOCK_ADMIN_FIRST_NAME" \
      -s lastName="$KEYCLOAK_MOCK_ADMIN_LAST_NAME"

      # Get the mock admin's ID
      MOCK_ADMIN_ID=$($KCADM_PATH get users -r forms-ai -q username=$KEYCLOAK_MOCK_ADMIN --fields id --format csv | tail -n1 | tr -d '\r"')

      # Set password for mock admin
      $KCADM_PATH set-password -r forms-ai --userid $MOCK_ADMIN_ID --new-password $KEYCLOAK_MOCK_ADMIN_PASSWORD

      # Assign admin role
      CLIENT_UUID=$($KCADM_PATH get clients -r forms-ai --fields id,clientId | \
      grep -B1 "\"clientId\" : \"angular-frontend\"" | \
      grep '"id"' | sed 's/.*"id" : "\(.*\)".*/\1/')
      $KCADM_PATH add-roles \
      -r forms-ai \
      --uid $MOCK_ADMIN_ID \
      --cclientid angular-frontend \
      --rolename client_admin

      # Optionally assign realm role 'spring'
      $KCADM_PATH add-roles -r forms-ai --uid $MOCK_ADMIN_ID --rolename spring

      echo "Mock admin '$KEYCLOAK_MOCK_ADMIN' created and role assigned"
      else
      echo "Mock admin '$KEYCLOAK_MOCK_ADMIN' already exists"
      fi

    echo "Init complete. Exiting."
    exit 0
